一、对于读多写少的业务如何处理高并发
1、使用synchronize可以满足加锁，但会出现性能瓶颈
2、一写多读的情况下可以使用volatile关键字，保证可见性，保证其他线程读取的数据，均是内存中最新值。
3、多读多写（读大于写）的情况，可以使用读锁加写锁
  Lock readLock = Lock.readLock();// 读锁
  Lock writeLock = Lock.writeLock();// 写锁
  
4、多读少写，可以考虑使用copyOnWrite系列，例如copyOnwriteArrayList类。内部原理为
      复制一个容器，在读的时候，只读取未更新的容器，当更新容器完成时，替换容器。
      缺点：占用内存比较多，另外数据一致难以保证，只能保证最终数据一致性，当要求读取实时性特别高的时候，不适合该方法。
      
      
二、处理mq重复问题
1、采用乐观锁
2、采用数据库唯一索引

三、字节码组成
1、magic 固定值 0xCAFEBABE 应该校验是否为java
2、version 版本
3、method_count 方法总数

四、二叉树排序规则
1、第一个数放中间，后面小的放左边，大的放右边
2、利用中序排序，则完成二叉树排序
  