一、AOP
1.AOP的底层实现
  （1）动态代理
    1）JDK动态代理
    2）CGLIB动态代理
    （2）使用这两种代理的条件：
    1）如果调用的类使用的是接口，则使用CGLIB动态代理 （SpringCGLIB）
    2）如果调用的类使用的是非接口且启用@EnableAspectJAutoProxy(proxyTargetClass=false)，
    	则使用JDK动态代理 
    3)如果proxyTargetClass=true，则强制使用CGLIB动态代理
    
2.AOP相关的概念
  （1）Aspect     切面 交给spring容器处理
  （2）Join point 连接点 （表记录）
  （3）PointCut   切点（连接点的集合，表）
  （4）Advice     通知
  
3.实现AOP功能
  （1）@AspectJ support
     1) 增加配置类 @configuration 
                     使用@EnableAspectJAutoProxy注解
     2）使用xml方式
     
  （2）定义个切面类
     1）使用@AspectJ注解
     2）使用@Pointcut
     3）通知：前置通知，后置通知
       @Before @After
       
       
二、MySQL
1、表锁与行锁 
     表锁只对整个表进行锁表操作，行锁只针对行级别进行锁操作
  1）InnoDB使用表锁 + 行锁
  2）MyISam使用表锁
  3）行锁 包含：共享锁与排他锁

2、共享锁与排他锁
	1）共享锁（Share Lock）
       	共享锁又称为读锁，是读取操作创建的锁。其他用户可以并发读取数据，
       	 但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。
                 用法：select ... lock in share mode;     
	2）排他锁
       	排他锁又称为写锁，如果事务T对数据A加上排他锁后，则其他事务不能对A
       	加任何类型的封锁，获取排他锁，既可以读取数据，又可以修改数据。
                 用法: select ... for update;
        
	3）意向锁：意向锁是InnoDB自动给涉及的数据加排他锁或共享锁的过程。

3、乐观锁与悲观锁
   1）悲观锁，锁住整个事务，主要用于数据争用激烈的环境，以及发生并发冲突时，
              使用锁保护数据的成本要低于回滚事务的成本的环境中。
             在数据库中，悲观锁的流程如下：
      	在对任意记录进行修改前，先尝试为该记录增加排他锁，如果加锁失败，则说明该记录正在被修改，
                    那么当前查询可能要等待或者抛出异常。如果加锁成功，那么就可以对记录进行修改，事务完成后就会解锁。
        
        
       

   






























